2023-10-23 17:53:37,850 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]
CUDA available: True
GPU 0,1,2: NVIDIA GeForce GTX 1080 Ti
CUDA_HOME: /usr/local/cuda-10.2
NVCC: Cuda compilation tools, release 10.2, V10.2.89
GCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
PyTorch: 1.10.1+cu102
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.2+cu102
OpenCV: 4.6.0
MMCV: 1.4.4
MMCV Compiler: GCC 5.4
MMCV CUDA Compiler: not available
MMSegmentation: 0.24.1+b0b89f0
------------------------------------------------------------

2023-10-23 17:53:37,850 - mmseg - INFO - Distributed training: True
2023-10-23 17:53:38,885 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
img_size = 512
in_channels = 768
out_indices = [11]
model = dict(
    type='CAPLSegViT',
    pretrained='/media/data/ziqin/pretrained/B_16.pth',
    context_length=77,
    backbone=dict(
        type='BaseImageNetViT',
        layers=[3, 4, 6, 3],
        style='pytorch',
        out_indices=[11],
        pretrained='/media/data/ziqin/pretrained/B_16.pth'),
    decode_head=dict(
        type='CAPLHeadSeg',
        img_size=512,
        in_channels=768,
        num_classes=15,
        loss_decode=dict(
            type='CELoss',
            num_classes=16,
            dec_layers=3,
            loss_weight=1.0,
            ce_weight=1.0),
        channels=768,
        seen_idx=[0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
        all_idx=[
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19, 20
        ]),
    train_cfg=dict(),
    test_cfg=dict(mode='slide', crop_size=(512, 512), stride=(426, 426)),
    base_class=[0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
    novel_class=[1, 2, 3, 4, 5],
    both_class=[
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20
    ],
    split=0,
    shot=1,
    supp_dir='/media/data/ziqin/data_fss/VOC2012',
    supp_path=
    '/media/data/ziqin/data_fss/VOC2012/ImageSets/FewShotSegmentation/val_supp_split_0_shot_1.txt',
    ft_backbone=False)
dataset_type = 'ZeroPascalVOCDataset21'
data_root = '/media/data/ziqin/data_fss/VOC2012'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 512)
split = 0
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', reduce_zero_label=False),
    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 512),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True, min_size=512),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    train=dict(
        type='ZeroPascalVOCDataset21',
        data_root='/media/data/ziqin/data_fss/VOC2012',
        img_dir='JPEGImages',
        ann_dir='Annotations',
        split='ImageSets/ShotSegmentation/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', reduce_zero_label=False),
            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='ZeroPascalVOCDataset21',
        data_root='/media/data/ziqin/data_fss/VOC2012',
        img_dir='JPEGImages',
        ann_dir='Annotations',
        split='ImageSets/ShotSegmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True, min_size=512),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='ZeroPascalVOCDataset21',
        data_root='/media/data/ziqin/data_fss/VOC2012',
        img_dir='JPEGImages',
        ann_dir='Annotations',
        split='ImageSets/ShotSegmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True, min_size=512),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
find_unused_parameters = True
optimizer = dict(
    type='SGD',
    lr=0.001,
    weight_decay=0.01,
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(lr_mult=1.0),
            norm=dict(decay_mult=0.0),
            ln=dict(decay_mult=0.0),
            head=dict(lr_mult=10.0))))
optimizer_config = dict()
lr_config = dict(
    policy='poly',
    power=0.9,
    min_lr=1e-06,
    by_epoch=False,
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06)
runner = dict(type='IterBasedRunner', max_iters=20000)
checkpoint_config = dict(by_epoch=False, interval=5000)
evaluation = dict(interval=20001, metric='mIoU')
base_class = [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
novel_class = [1, 2, 3, 4, 5]
both_class = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
]
num_classes = 16
eval_supp_dir = '/media/data/ziqin/data_fss/VOC2012'
eval_supp_path = '/media/data/ziqin/data_fss/VOC2012/ImageSets/FewShotSegmentation/val_supp_split_0_shot_1.txt'
pretrained = '/media/data/ziqin/pretrained/B_16.pth'
work_dir = './work_dirs_fss/voc_capl/vit_b_16_split_0'
gpu_ids = range(0, 1)

2023-10-23 17:53:38,899 - mmseg - INFO - Loaded 10582 images
2023-10-23 17:53:43,628 - mmseg - INFO - #Params: 99431425
2023-10-23 17:53:44,199 - mmseg - INFO - CAPLSegViT(
  (backbone): BaseImageNetViT(
    (patch_embedding): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16))
    (positional_embedding): PositionalEmbedding1D()
    (transformer): Transformer(
      (blocks): ModuleList(
        (0): Block(
          (attn): MultiHeadedSelfAttention(
            (proj_q): Linear(in_features=768, out_features=768, bias=True)
            (proj_k): Linear(in_features=768, out_features=768, bias=True)
            (proj_v): Linear(in_features=768, out_features=768, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
          )
          (proj): Linear(in_features=768, out_features=768, bias=True)
          (norm1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (pwff): PositionWiseFeedForward(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
          )
          (norm2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (drop): Dropout(p=0.1, inplace=False)
        )
        (1): Block(
          (attn): MultiHeadedSelfAttention(
            (proj_q): Linear(in_features=768, out_features=768, bias=True)
            (proj_k): Linear(in_features=768, out_features=768, bias=True)
            (proj_v): Linear(in_features=768, out_features=768, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
          )
          (proj): Linear(in_features=768, out_features=768, bias=True)
          (norm1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (pwff): PositionWiseFeedForward(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
          )
          (norm2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (drop): Dropout(p=0.1, inplace=False)
        )
        (2): Block(
          (attn): MultiHeadedSelfAttention(
            (proj_q): Linear(in_features=768, out_features=768, bias=True)
            (proj_k): Linear(in_features=768, out_features=768, bias=True)
            (proj_v): Linear(in_features=768, out_features=768, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
          )
          (proj): Linear(in_features=768, out_features=768, bias=True)
          (norm1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (pwff): PositionWiseFeedForward(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
          )
          (norm2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (drop): Dropout(p=0.1, inplace=False)
        )
        (3): Block(
          (attn): MultiHeadedSelfAttention(
            (proj_q): Linear(in_features=768, out_features=768, bias=True)
            (proj_k): Linear(in_features=768, out_features=768, bias=True)
            (proj_v): Linear(in_features=768, out_features=768, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
          )
          (proj): Linear(in_features=768, out_features=768, bias=True)
          (norm1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (pwff): PositionWiseFeedForward(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
          )
          (norm2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (drop): Dropout(p=0.1, inplace=False)
        )
        (4): Block(
          (attn): MultiHeadedSelfAttention(
            (proj_q): Linear(in_features=768, out_features=768, bias=True)
            (proj_k): Linear(in_features=768, out_features=768, bias=True)
            (proj_v): Linear(in_features=768, out_features=768, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
          )
          (proj): Linear(in_features=768, out_features=768, bias=True)
          (norm1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (pwff): PositionWiseFeedForward(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
          )
          (norm2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (drop): Dropout(p=0.1, inplace=False)
        )
        (5): Block(
          (attn): MultiHeadedSelfAttention(
            (proj_q): Linear(in_features=768, out_features=768, bias=True)
            (proj_k): Linear(in_features=768, out_features=768, bias=True)
            (proj_v): Linear(in_features=768, out_features=768, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
          )
          (proj): Linear(in_features=768, out_features=768, bias=True)
          (norm1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (pwff): PositionWiseFeedForward(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
          )
          (norm2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (drop): Dropout(p=0.1, inplace=False)
        )
        (6): Block(
          (attn): MultiHeadedSelfAttention(
            (proj_q): Linear(in_features=768, out_features=768, bias=True)
            (proj_k): Linear(in_features=768, out_features=768, bias=True)
            (proj_v): Linear(in_features=768, out_features=768, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
          )
          (proj): Linear(in_features=768, out_features=768, bias=True)
          (norm1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (pwff): PositionWiseFeedForward(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
          )
          (norm2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (drop): Dropout(p=0.1, inplace=False)
        )
        (7): Block(
          (attn): MultiHeadedSelfAttention(
            (proj_q): Linear(in_features=768, out_features=768, bias=True)
            (proj_k): Linear(in_features=768, out_features=768, bias=True)
            (proj_v): Linear(in_features=768, out_features=768, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
          )
          (proj): Linear(in_features=768, out_features=768, bias=True)
          (norm1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (pwff): PositionWiseFeedForward(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
          )
          (norm2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (drop): Dropout(p=0.1, inplace=False)
        )
        (8): Block(
          (attn): MultiHeadedSelfAttention(
            (proj_q): Linear(in_features=768, out_features=768, bias=True)
            (proj_k): Linear(in_features=768, out_features=768, bias=True)
            (proj_v): Linear(in_features=768, out_features=768, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
          )
          (proj): Linear(in_features=768, out_features=768, bias=True)
          (norm1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (pwff): PositionWiseFeedForward(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
          )
          (norm2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (drop): Dropout(p=0.1, inplace=False)
        )
        (9): Block(
          (attn): MultiHeadedSelfAttention(
            (proj_q): Linear(in_features=768, out_features=768, bias=True)
            (proj_k): Linear(in_features=768, out_features=768, bias=True)
            (proj_v): Linear(in_features=768, out_features=768, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
          )
          (proj): Linear(in_features=768, out_features=768, bias=True)
          (norm1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (pwff): PositionWiseFeedForward(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
          )
          (norm2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (drop): Dropout(p=0.1, inplace=False)
        )
        (10): Block(
          (attn): MultiHeadedSelfAttention(
            (proj_q): Linear(in_features=768, out_features=768, bias=True)
            (proj_k): Linear(in_features=768, out_features=768, bias=True)
            (proj_v): Linear(in_features=768, out_features=768, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
          )
          (proj): Linear(in_features=768, out_features=768, bias=True)
          (norm1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (pwff): PositionWiseFeedForward(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
          )
          (norm2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (drop): Dropout(p=0.1, inplace=False)
        )
        (11): Block(
          (attn): MultiHeadedSelfAttention(
            (proj_q): Linear(in_features=768, out_features=768, bias=True)
            (proj_k): Linear(in_features=768, out_features=768, bias=True)
            (proj_v): Linear(in_features=768, out_features=768, bias=True)
            (drop): Dropout(p=0.1, inplace=False)
          )
          (proj): Linear(in_features=768, out_features=768, bias=True)
          (norm1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (pwff): PositionWiseFeedForward(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
          )
          (norm2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (drop): Dropout(p=0.1, inplace=False)
        )
      )
    )
    (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
  )
  (decode_head): CAPLHeadSeg(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CELoss(
      (criterion): CECriterion()
    )
    (dropout): Dropout2d(p=0.1, inplace=False)
    (ppm): PPM(
      (features): ModuleList(
        (0): Sequential(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): AdaptiveAvgPool2d(output_size=2)
          (1): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): AdaptiveAvgPool2d(output_size=3)
          (1): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU(inplace=True)
        )
        (3): Sequential(
          (0): AdaptiveAvgPool2d(output_size=6)
          (1): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU(inplace=True)
        )
      )
    )
    (cls): Sequential(
      (0): Conv2d(1536, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Dropout2d(p=0.1, inplace=False)
      (4): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
    )
    (gamma_conv): Sequential(
      (0): Linear(in_features=1536, out_features=768, bias=False)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=768, out_features=1, bias=True)
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2023-10-23 17:53:45,614 - mmseg - INFO - Loaded 1449 images
2023-10-23 17:53:45,625 - mmseg - INFO - Start running, host: ziqin@geovision2, work_dir: /media/data/ziqin/code/FewSegViT/work_dirs_fss/voc_capl/vit_b_16_split_0
2023-10-23 17:53:45,626 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-10-23 17:53:45,626 - mmseg - INFO - workflow: [('train', 1)], max: 20000 iters
2023-10-23 17:53:45,626 - mmseg - INFO - Checkpoints will be saved to /media/data/ziqin/code/FewSegViT/work_dirs_fss/voc_capl/vit_b_16_split_0 by HardDiskBackend.
2023-10-23 17:54:39,902 - mmseg - INFO - Iter [50/20000]	lr: 3.260e-05, eta: 3:09:41, time: 0.571, data_time: 0.018, memory: 3513, decode.loss_mask_ce: 2.6501, decode.acc_seg: 15.3623, loss: 2.6501
2023-10-23 17:55:08,822 - mmseg - INFO - Iter [100/20000]	lr: 6.571e-05, eta: 3:10:32, time: 0.578, data_time: 0.006, memory: 3513, decode.loss_mask_ce: 1.8621, decode.acc_seg: 61.5685, loss: 1.8621
2023-10-23 17:55:38,225 - mmseg - INFO - Iter [150/20000]	lr: 9.867e-05, eta: 3:11:32, time: 0.588, data_time: 0.006, memory: 3513, decode.loss_mask_ce: 1.4539, decode.acc_seg: 62.4070, loss: 1.4539
2023-10-23 17:56:07,937 - mmseg - INFO - Iter [200/20000]	lr: 1.315e-04, eta: 3:12:20, time: 0.594, data_time: 0.006, memory: 3513, decode.loss_mask_ce: 1.2092, decode.acc_seg: 65.7131, loss: 1.2092
2023-10-23 17:56:37,668 - mmseg - INFO - Iter [250/20000]	lr: 1.641e-04, eta: 3:12:37, time: 0.594, data_time: 0.007, memory: 3513, decode.loss_mask_ce: 1.0039, decode.acc_seg: 70.8962, loss: 1.0039
2023-10-23 17:57:07,260 - mmseg - INFO - Iter [300/20000]	lr: 1.967e-04, eta: 3:12:29, time: 0.592, data_time: 0.006, memory: 3513, decode.loss_mask_ce: 0.9457, decode.acc_seg: 71.1227, loss: 0.9457
2023-10-23 17:57:36,962 - mmseg - INFO - Iter [350/20000]	lr: 2.290e-04, eta: 3:12:22, time: 0.594, data_time: 0.006, memory: 3513, decode.loss_mask_ce: 0.8525, decode.acc_seg: 72.9877, loss: 0.8525
2023-10-23 17:58:06,792 - mmseg - INFO - Iter [400/20000]	lr: 2.612e-04, eta: 3:12:15, time: 0.597, data_time: 0.006, memory: 3513, decode.loss_mask_ce: 0.8578, decode.acc_seg: 73.3924, loss: 0.8578
2023-10-23 17:58:36,477 - mmseg - INFO - Iter [450/20000]	lr: 2.933e-04, eta: 3:11:57, time: 0.594, data_time: 0.006, memory: 3513, decode.loss_mask_ce: 0.7366, decode.acc_seg: 76.9096, loss: 0.7366
2023-10-23 17:59:06,327 - mmseg - INFO - Iter [500/20000]	lr: 3.252e-04, eta: 3:11:43, time: 0.597, data_time: 0.006, memory: 3513, decode.loss_mask_ce: 0.7737, decode.acc_seg: 74.1485, loss: 0.7737
2023-10-23 17:59:36,189 - mmseg - INFO - Iter [550/20000]	lr: 3.570e-04, eta: 3:11:26, time: 0.597, data_time: 0.007, memory: 3513, decode.loss_mask_ce: 0.7106, decode.acc_seg: 77.1745, loss: 0.7106
2023-10-23 18:00:05,999 - mmseg - INFO - Iter [600/20000]	lr: 3.886e-04, eta: 3:11:06, time: 0.596, data_time: 0.006, memory: 3513, decode.loss_mask_ce: 0.7037, decode.acc_seg: 77.3442, loss: 0.7037
2023-10-23 18:00:35,819 - mmseg - INFO - Iter [650/20000]	lr: 4.200e-04, eta: 3:10:44, time: 0.596, data_time: 0.006, memory: 3513, decode.loss_mask_ce: 0.7004, decode.acc_seg: 77.6764, loss: 0.7004
2023-10-23 18:01:05,612 - mmseg - INFO - Iter [700/20000]	lr: 4.513e-04, eta: 3:10:21, time: 0.596, data_time: 0.007, memory: 3513, decode.loss_mask_ce: 0.6524, decode.acc_seg: 79.3187, loss: 0.6524
2023-10-23 18:01:35,408 - mmseg - INFO - Iter [750/20000]	lr: 4.825e-04, eta: 3:09:56, time: 0.596, data_time: 0.006, memory: 3513, decode.loss_mask_ce: 0.6696, decode.acc_seg: 78.0167, loss: 0.6696
2023-10-23 18:02:05,238 - mmseg - INFO - Iter [800/20000]	lr: 5.135e-04, eta: 3:09:32, time: 0.597, data_time: 0.006, memory: 3513, decode.loss_mask_ce: 0.6347, decode.acc_seg: 79.4995, loss: 0.6347
2023-10-23 18:02:35,088 - mmseg - INFO - Iter [850/20000]	lr: 5.444e-04, eta: 3:09:08, time: 0.597, data_time: 0.007, memory: 3513, decode.loss_mask_ce: 0.6345, decode.acc_seg: 79.6781, loss: 0.6345
2023-10-23 18:03:07,371 - mmseg - INFO - Iter [900/20000]	lr: 5.751e-04, eta: 3:09:35, time: 0.646, data_time: 0.059, memory: 3513, decode.loss_mask_ce: 0.6206, decode.acc_seg: 79.8403, loss: 0.6206
